//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ePlanifViewModelsLib.ePlanifService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ePlanifService.IePlanifService")]
    public interface IePlanifService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetEmployees", ReplyAction="http://tempuri.org/IePlanifService/GetEmployeesResponse")]
        ePlanifModelsLib.Employee[] GetEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetEmployees", ReplyAction="http://tempuri.org/IePlanifService/GetEmployeesResponse")]
        System.Threading.Tasks.Task<ePlanifModelsLib.Employee[]> GetEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateEmployee", ReplyAction="http://tempuri.org/IePlanifService/CreateEmployeeResponse")]
        int CreateEmployee(ePlanifModelsLib.Employee Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateEmployee", ReplyAction="http://tempuri.org/IePlanifService/CreateEmployeeResponse")]
        System.Threading.Tasks.Task<int> CreateEmployeeAsync(ePlanifModelsLib.Employee Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateEmployee", ReplyAction="http://tempuri.org/IePlanifService/UpdateEmployeeResponse")]
        bool UpdateEmployee(ePlanifModelsLib.Employee Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateEmployee", ReplyAction="http://tempuri.org/IePlanifService/UpdateEmployeeResponse")]
        System.Threading.Tasks.Task<bool> UpdateEmployeeAsync(ePlanifModelsLib.Employee Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetActivityTypes", ReplyAction="http://tempuri.org/IePlanifService/GetActivityTypesResponse")]
        ePlanifModelsLib.ActivityType[] GetActivityTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetActivityTypes", ReplyAction="http://tempuri.org/IePlanifService/GetActivityTypesResponse")]
        System.Threading.Tasks.Task<ePlanifModelsLib.ActivityType[]> GetActivityTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateActivityType", ReplyAction="http://tempuri.org/IePlanifService/CreateActivityTypeResponse")]
        int CreateActivityType(ePlanifModelsLib.ActivityType Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateActivityType", ReplyAction="http://tempuri.org/IePlanifService/CreateActivityTypeResponse")]
        System.Threading.Tasks.Task<int> CreateActivityTypeAsync(ePlanifModelsLib.ActivityType Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateActivityType", ReplyAction="http://tempuri.org/IePlanifService/UpdateActivityTypeResponse")]
        bool UpdateActivityType(ePlanifModelsLib.ActivityType Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateActivityType", ReplyAction="http://tempuri.org/IePlanifService/UpdateActivityTypeResponse")]
        System.Threading.Tasks.Task<bool> UpdateActivityTypeAsync(ePlanifModelsLib.ActivityType Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetProfiles", ReplyAction="http://tempuri.org/IePlanifService/GetProfilesResponse")]
        ePlanifModelsLib.Profile[] GetProfiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetProfiles", ReplyAction="http://tempuri.org/IePlanifService/GetProfilesResponse")]
        System.Threading.Tasks.Task<ePlanifModelsLib.Profile[]> GetProfilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateProfile", ReplyAction="http://tempuri.org/IePlanifService/CreateProfileResponse")]
        int CreateProfile(ePlanifModelsLib.Profile Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateProfile", ReplyAction="http://tempuri.org/IePlanifService/CreateProfileResponse")]
        System.Threading.Tasks.Task<int> CreateProfileAsync(ePlanifModelsLib.Profile Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateProfile", ReplyAction="http://tempuri.org/IePlanifService/UpdateProfileResponse")]
        bool UpdateProfile(ePlanifModelsLib.Profile Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateProfile", ReplyAction="http://tempuri.org/IePlanifService/UpdateProfileResponse")]
        System.Threading.Tasks.Task<bool> UpdateProfileAsync(ePlanifModelsLib.Profile Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetActivities", ReplyAction="http://tempuri.org/IePlanifService/GetActivitiesResponse")]
        ePlanifModelsLib.Activity[] GetActivities(System.DateTime Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetActivities", ReplyAction="http://tempuri.org/IePlanifService/GetActivitiesResponse")]
        System.Threading.Tasks.Task<ePlanifModelsLib.Activity[]> GetActivitiesAsync(System.DateTime Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateActivity", ReplyAction="http://tempuri.org/IePlanifService/CreateActivityResponse")]
        int CreateActivity(ePlanifModelsLib.Activity Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateActivity", ReplyAction="http://tempuri.org/IePlanifService/CreateActivityResponse")]
        System.Threading.Tasks.Task<int> CreateActivityAsync(ePlanifModelsLib.Activity Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/DeleteActivity", ReplyAction="http://tempuri.org/IePlanifService/DeleteActivityResponse")]
        bool DeleteActivity(int ItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/DeleteActivity", ReplyAction="http://tempuri.org/IePlanifService/DeleteActivityResponse")]
        System.Threading.Tasks.Task<bool> DeleteActivityAsync(int ItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/BulkDeleteActivities", ReplyAction="http://tempuri.org/IePlanifService/BulkDeleteActivitiesResponse")]
        bool BulkDeleteActivities(System.DateTime StartDate, System.DateTime EndDate, int EmployeeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/BulkDeleteActivities", ReplyAction="http://tempuri.org/IePlanifService/BulkDeleteActivitiesResponse")]
        System.Threading.Tasks.Task<bool> BulkDeleteActivitiesAsync(System.DateTime StartDate, System.DateTime EndDate, int EmployeeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateActivity", ReplyAction="http://tempuri.org/IePlanifService/UpdateActivityResponse")]
        bool UpdateActivity(ePlanifModelsLib.Activity Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateActivity", ReplyAction="http://tempuri.org/IePlanifService/UpdateActivityResponse")]
        System.Threading.Tasks.Task<bool> UpdateActivityAsync(ePlanifModelsLib.Activity Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetGroupMembers", ReplyAction="http://tempuri.org/IePlanifService/GetGroupMembersResponse")]
        ePlanifModelsLib.GroupMember[] GetGroupMembers(int GroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetGroupMembers", ReplyAction="http://tempuri.org/IePlanifService/GetGroupMembersResponse")]
        System.Threading.Tasks.Task<ePlanifModelsLib.GroupMember[]> GetGroupMembersAsync(int GroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateGroupMember", ReplyAction="http://tempuri.org/IePlanifService/CreateGroupMemberResponse")]
        int CreateGroupMember(ePlanifModelsLib.GroupMember Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateGroupMember", ReplyAction="http://tempuri.org/IePlanifService/CreateGroupMemberResponse")]
        System.Threading.Tasks.Task<int> CreateGroupMemberAsync(ePlanifModelsLib.GroupMember Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/DeleteGroupMember", ReplyAction="http://tempuri.org/IePlanifService/DeleteGroupMemberResponse")]
        bool DeleteGroupMember(int ItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/DeleteGroupMember", ReplyAction="http://tempuri.org/IePlanifService/DeleteGroupMemberResponse")]
        System.Threading.Tasks.Task<bool> DeleteGroupMemberAsync(int ItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetGrants", ReplyAction="http://tempuri.org/IePlanifService/GetGrantsResponse")]
        ePlanifModelsLib.Grant[] GetGrants(int ProfileID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetGrants", ReplyAction="http://tempuri.org/IePlanifService/GetGrantsResponse")]
        System.Threading.Tasks.Task<ePlanifModelsLib.Grant[]> GetGrantsAsync(int ProfileID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateGrant", ReplyAction="http://tempuri.org/IePlanifService/CreateGrantResponse")]
        int CreateGrant(ePlanifModelsLib.Grant Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateGrant", ReplyAction="http://tempuri.org/IePlanifService/CreateGrantResponse")]
        System.Threading.Tasks.Task<int> CreateGrantAsync(ePlanifModelsLib.Grant Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/DeleteGrant", ReplyAction="http://tempuri.org/IePlanifService/DeleteGrantResponse")]
        bool DeleteGrant(int ItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/DeleteGrant", ReplyAction="http://tempuri.org/IePlanifService/DeleteGrantResponse")]
        System.Threading.Tasks.Task<bool> DeleteGrantAsync(int ItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateGrant", ReplyAction="http://tempuri.org/IePlanifService/UpdateGrantResponse")]
        bool UpdateGrant(ePlanifModelsLib.Grant Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateGrant", ReplyAction="http://tempuri.org/IePlanifService/UpdateGrantResponse")]
        System.Threading.Tasks.Task<bool> UpdateGrantAsync(ePlanifModelsLib.Grant Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetGroups", ReplyAction="http://tempuri.org/IePlanifService/GetGroupsResponse")]
        ePlanifModelsLib.Group[] GetGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetGroups", ReplyAction="http://tempuri.org/IePlanifService/GetGroupsResponse")]
        System.Threading.Tasks.Task<ePlanifModelsLib.Group[]> GetGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateGroup", ReplyAction="http://tempuri.org/IePlanifService/CreateGroupResponse")]
        int CreateGroup(ePlanifModelsLib.Group Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateGroup", ReplyAction="http://tempuri.org/IePlanifService/CreateGroupResponse")]
        System.Threading.Tasks.Task<int> CreateGroupAsync(ePlanifModelsLib.Group Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/DeleteGroup", ReplyAction="http://tempuri.org/IePlanifService/DeleteGroupResponse")]
        bool DeleteGroup(int ItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/DeleteGroup", ReplyAction="http://tempuri.org/IePlanifService/DeleteGroupResponse")]
        System.Threading.Tasks.Task<bool> DeleteGroupAsync(int ItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateGroup", ReplyAction="http://tempuri.org/IePlanifService/UpdateGroupResponse")]
        bool UpdateGroup(ePlanifModelsLib.Group Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateGroup", ReplyAction="http://tempuri.org/IePlanifService/UpdateGroupResponse")]
        System.Threading.Tasks.Task<bool> UpdateGroupAsync(ePlanifModelsLib.Group Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetAccounts", ReplyAction="http://tempuri.org/IePlanifService/GetAccountsResponse")]
        ePlanifModelsLib.Account[] GetAccounts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetAccounts", ReplyAction="http://tempuri.org/IePlanifService/GetAccountsResponse")]
        System.Threading.Tasks.Task<ePlanifModelsLib.Account[]> GetAccountsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateAccount", ReplyAction="http://tempuri.org/IePlanifService/CreateAccountResponse")]
        int CreateAccount(ePlanifModelsLib.Account Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateAccount", ReplyAction="http://tempuri.org/IePlanifService/CreateAccountResponse")]
        System.Threading.Tasks.Task<int> CreateAccountAsync(ePlanifModelsLib.Account Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateAccount", ReplyAction="http://tempuri.org/IePlanifService/UpdateAccountResponse")]
        bool UpdateAccount(ePlanifModelsLib.Account Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateAccount", ReplyAction="http://tempuri.org/IePlanifService/UpdateAccountResponse")]
        System.Threading.Tasks.Task<bool> UpdateAccountAsync(ePlanifModelsLib.Account Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetCurrentAccount", ReplyAction="http://tempuri.org/IePlanifService/GetCurrentAccountResponse")]
        ePlanifModelsLib.Account GetCurrentAccount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetCurrentAccount", ReplyAction="http://tempuri.org/IePlanifService/GetCurrentAccountResponse")]
        System.Threading.Tasks.Task<ePlanifModelsLib.Account> GetCurrentAccountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetCurrentProfile", ReplyAction="http://tempuri.org/IePlanifService/GetCurrentProfileResponse")]
        ePlanifModelsLib.Profile GetCurrentProfile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetCurrentProfile", ReplyAction="http://tempuri.org/IePlanifService/GetCurrentProfileResponse")]
        System.Threading.Tasks.Task<ePlanifModelsLib.Profile> GetCurrentProfileAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetOption", ReplyAction="http://tempuri.org/IePlanifService/GetOptionResponse")]
        ePlanifModelsLib.Option GetOption();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetOption", ReplyAction="http://tempuri.org/IePlanifService/GetOptionResponse")]
        System.Threading.Tasks.Task<ePlanifModelsLib.Option> GetOptionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateOption", ReplyAction="http://tempuri.org/IePlanifService/UpdateOptionResponse")]
        bool UpdateOption(ePlanifModelsLib.Option Option);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateOption", ReplyAction="http://tempuri.org/IePlanifService/UpdateOptionResponse")]
        System.Threading.Tasks.Task<bool> UpdateOptionAsync(ePlanifModelsLib.Option Option);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetLayers", ReplyAction="http://tempuri.org/IePlanifService/GetLayersResponse")]
        ePlanifModelsLib.Layer[] GetLayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetLayers", ReplyAction="http://tempuri.org/IePlanifService/GetLayersResponse")]
        System.Threading.Tasks.Task<ePlanifModelsLib.Layer[]> GetLayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateLayer", ReplyAction="http://tempuri.org/IePlanifService/CreateLayerResponse")]
        int CreateLayer(ePlanifModelsLib.Layer Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateLayer", ReplyAction="http://tempuri.org/IePlanifService/CreateLayerResponse")]
        System.Threading.Tasks.Task<int> CreateLayerAsync(ePlanifModelsLib.Layer Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateLayer", ReplyAction="http://tempuri.org/IePlanifService/UpdateLayerResponse")]
        bool UpdateLayer(ePlanifModelsLib.Layer Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateLayer", ReplyAction="http://tempuri.org/IePlanifService/UpdateLayerResponse")]
        System.Threading.Tasks.Task<bool> UpdateLayerAsync(ePlanifModelsLib.Layer Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetEmployeeViews", ReplyAction="http://tempuri.org/IePlanifService/GetEmployeeViewsResponse")]
        ePlanifModelsLib.EmployeeView[] GetEmployeeViews();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetEmployeeViews", ReplyAction="http://tempuri.org/IePlanifService/GetEmployeeViewsResponse")]
        System.Threading.Tasks.Task<ePlanifModelsLib.EmployeeView[]> GetEmployeeViewsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateEmployeeView", ReplyAction="http://tempuri.org/IePlanifService/CreateEmployeeViewResponse")]
        int CreateEmployeeView(ePlanifModelsLib.EmployeeView Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateEmployeeView", ReplyAction="http://tempuri.org/IePlanifService/CreateEmployeeViewResponse")]
        System.Threading.Tasks.Task<int> CreateEmployeeViewAsync(ePlanifModelsLib.EmployeeView Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/DeleteEmployeeView", ReplyAction="http://tempuri.org/IePlanifService/DeleteEmployeeViewResponse")]
        bool DeleteEmployeeView(int ItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/DeleteEmployeeView", ReplyAction="http://tempuri.org/IePlanifService/DeleteEmployeeViewResponse")]
        System.Threading.Tasks.Task<bool> DeleteEmployeeViewAsync(int ItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateEmployeeView", ReplyAction="http://tempuri.org/IePlanifService/UpdateEmployeeViewResponse")]
        bool UpdateEmployeeView(ePlanifModelsLib.EmployeeView Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateEmployeeView", ReplyAction="http://tempuri.org/IePlanifService/UpdateEmployeeViewResponse")]
        System.Threading.Tasks.Task<bool> UpdateEmployeeViewAsync(ePlanifModelsLib.EmployeeView Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetActivityTypeViews", ReplyAction="http://tempuri.org/IePlanifService/GetActivityTypeViewsResponse")]
        ePlanifModelsLib.ActivityTypeView[] GetActivityTypeViews();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetActivityTypeViews", ReplyAction="http://tempuri.org/IePlanifService/GetActivityTypeViewsResponse")]
        System.Threading.Tasks.Task<ePlanifModelsLib.ActivityTypeView[]> GetActivityTypeViewsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateActivityTypeView", ReplyAction="http://tempuri.org/IePlanifService/CreateActivityTypeViewResponse")]
        int CreateActivityTypeView(ePlanifModelsLib.ActivityTypeView Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateActivityTypeView", ReplyAction="http://tempuri.org/IePlanifService/CreateActivityTypeViewResponse")]
        System.Threading.Tasks.Task<int> CreateActivityTypeViewAsync(ePlanifModelsLib.ActivityTypeView Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/DeleteActivityTypeView", ReplyAction="http://tempuri.org/IePlanifService/DeleteActivityTypeViewResponse")]
        bool DeleteActivityTypeView(int ItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/DeleteActivityTypeView", ReplyAction="http://tempuri.org/IePlanifService/DeleteActivityTypeViewResponse")]
        System.Threading.Tasks.Task<bool> DeleteActivityTypeViewAsync(int ItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateActivityTypeView", ReplyAction="http://tempuri.org/IePlanifService/UpdateActivityTypeViewResponse")]
        bool UpdateActivityTypeView(ePlanifModelsLib.ActivityTypeView Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/UpdateActivityTypeView", ReplyAction="http://tempuri.org/IePlanifService/UpdateActivityTypeViewResponse")]
        System.Threading.Tasks.Task<bool> UpdateActivityTypeViewAsync(ePlanifModelsLib.ActivityTypeView Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetEmployeeViewMembers", ReplyAction="http://tempuri.org/IePlanifService/GetEmployeeViewMembersResponse")]
        ePlanifModelsLib.EmployeeViewMember[] GetEmployeeViewMembers(int ViewID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetEmployeeViewMembers", ReplyAction="http://tempuri.org/IePlanifService/GetEmployeeViewMembersResponse")]
        System.Threading.Tasks.Task<ePlanifModelsLib.EmployeeViewMember[]> GetEmployeeViewMembersAsync(int ViewID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateEmployeeViewMember", ReplyAction="http://tempuri.org/IePlanifService/CreateEmployeeViewMemberResponse")]
        int CreateEmployeeViewMember(ePlanifModelsLib.EmployeeViewMember Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateEmployeeViewMember", ReplyAction="http://tempuri.org/IePlanifService/CreateEmployeeViewMemberResponse")]
        System.Threading.Tasks.Task<int> CreateEmployeeViewMemberAsync(ePlanifModelsLib.EmployeeViewMember Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/DeleteEmployeeViewMember", ReplyAction="http://tempuri.org/IePlanifService/DeleteEmployeeViewMemberResponse")]
        bool DeleteEmployeeViewMember(int ItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/DeleteEmployeeViewMember", ReplyAction="http://tempuri.org/IePlanifService/DeleteEmployeeViewMemberResponse")]
        System.Threading.Tasks.Task<bool> DeleteEmployeeViewMemberAsync(int ItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetActivityTypeViewMembers", ReplyAction="http://tempuri.org/IePlanifService/GetActivityTypeViewMembersResponse")]
        ePlanifModelsLib.ActivityTypeViewMember[] GetActivityTypeViewMembers(int ViewID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/GetActivityTypeViewMembers", ReplyAction="http://tempuri.org/IePlanifService/GetActivityTypeViewMembersResponse")]
        System.Threading.Tasks.Task<ePlanifModelsLib.ActivityTypeViewMember[]> GetActivityTypeViewMembersAsync(int ViewID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateActivityTypeViewMember", ReplyAction="http://tempuri.org/IePlanifService/CreateActivityTypeViewMemberResponse")]
        int CreateActivityTypeViewMember(ePlanifModelsLib.ActivityTypeViewMember Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/CreateActivityTypeViewMember", ReplyAction="http://tempuri.org/IePlanifService/CreateActivityTypeViewMemberResponse")]
        System.Threading.Tasks.Task<int> CreateActivityTypeViewMemberAsync(ePlanifModelsLib.ActivityTypeViewMember Item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/DeleteActivityTypeViewMember", ReplyAction="http://tempuri.org/IePlanifService/DeleteActivityTypeViewMemberResponse")]
        bool DeleteActivityTypeViewMember(int ItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/DeleteActivityTypeViewMember", ReplyAction="http://tempuri.org/IePlanifService/DeleteActivityTypeViewMemberResponse")]
        System.Threading.Tasks.Task<bool> DeleteActivityTypeViewMemberAsync(int ItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/HasWriteAccessToEmployee", ReplyAction="http://tempuri.org/IePlanifService/HasWriteAccessToEmployeeResponse")]
        bool HasWriteAccessToEmployee(int EmployeeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/HasWriteAccessToEmployee", ReplyAction="http://tempuri.org/IePlanifService/HasWriteAccessToEmployeeResponse")]
        System.Threading.Tasks.Task<bool> HasWriteAccessToEmployeeAsync(int EmployeeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/HasWriteAccessToActivity", ReplyAction="http://tempuri.org/IePlanifService/HasWriteAccessToActivityResponse")]
        bool HasWriteAccessToActivity(int ActivityID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IePlanifService/HasWriteAccessToActivity", ReplyAction="http://tempuri.org/IePlanifService/HasWriteAccessToActivityResponse")]
        System.Threading.Tasks.Task<bool> HasWriteAccessToActivityAsync(int ActivityID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IePlanifServiceChannel : ePlanifViewModelsLib.ePlanifService.IePlanifService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IePlanifServiceClient : System.ServiceModel.ClientBase<ePlanifViewModelsLib.ePlanifService.IePlanifService>, ePlanifViewModelsLib.ePlanifService.IePlanifService {
        
        public IePlanifServiceClient() {
        }
        
        public IePlanifServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IePlanifServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IePlanifServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IePlanifServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ePlanifModelsLib.Employee[] GetEmployees() {
            return base.Channel.GetEmployees();
        }
        
        public System.Threading.Tasks.Task<ePlanifModelsLib.Employee[]> GetEmployeesAsync() {
            return base.Channel.GetEmployeesAsync();
        }
        
        public int CreateEmployee(ePlanifModelsLib.Employee Item) {
            return base.Channel.CreateEmployee(Item);
        }
        
        public System.Threading.Tasks.Task<int> CreateEmployeeAsync(ePlanifModelsLib.Employee Item) {
            return base.Channel.CreateEmployeeAsync(Item);
        }
        
        public bool UpdateEmployee(ePlanifModelsLib.Employee Item) {
            return base.Channel.UpdateEmployee(Item);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateEmployeeAsync(ePlanifModelsLib.Employee Item) {
            return base.Channel.UpdateEmployeeAsync(Item);
        }
        
        public ePlanifModelsLib.ActivityType[] GetActivityTypes() {
            return base.Channel.GetActivityTypes();
        }
        
        public System.Threading.Tasks.Task<ePlanifModelsLib.ActivityType[]> GetActivityTypesAsync() {
            return base.Channel.GetActivityTypesAsync();
        }
        
        public int CreateActivityType(ePlanifModelsLib.ActivityType Item) {
            return base.Channel.CreateActivityType(Item);
        }
        
        public System.Threading.Tasks.Task<int> CreateActivityTypeAsync(ePlanifModelsLib.ActivityType Item) {
            return base.Channel.CreateActivityTypeAsync(Item);
        }
        
        public bool UpdateActivityType(ePlanifModelsLib.ActivityType Item) {
            return base.Channel.UpdateActivityType(Item);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateActivityTypeAsync(ePlanifModelsLib.ActivityType Item) {
            return base.Channel.UpdateActivityTypeAsync(Item);
        }
        
        public ePlanifModelsLib.Profile[] GetProfiles() {
            return base.Channel.GetProfiles();
        }
        
        public System.Threading.Tasks.Task<ePlanifModelsLib.Profile[]> GetProfilesAsync() {
            return base.Channel.GetProfilesAsync();
        }
        
        public int CreateProfile(ePlanifModelsLib.Profile Item) {
            return base.Channel.CreateProfile(Item);
        }
        
        public System.Threading.Tasks.Task<int> CreateProfileAsync(ePlanifModelsLib.Profile Item) {
            return base.Channel.CreateProfileAsync(Item);
        }
        
        public bool UpdateProfile(ePlanifModelsLib.Profile Item) {
            return base.Channel.UpdateProfile(Item);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateProfileAsync(ePlanifModelsLib.Profile Item) {
            return base.Channel.UpdateProfileAsync(Item);
        }
        
        public ePlanifModelsLib.Activity[] GetActivities(System.DateTime Date) {
            return base.Channel.GetActivities(Date);
        }
        
        public System.Threading.Tasks.Task<ePlanifModelsLib.Activity[]> GetActivitiesAsync(System.DateTime Date) {
            return base.Channel.GetActivitiesAsync(Date);
        }
        
        public int CreateActivity(ePlanifModelsLib.Activity Item) {
            return base.Channel.CreateActivity(Item);
        }
        
        public System.Threading.Tasks.Task<int> CreateActivityAsync(ePlanifModelsLib.Activity Item) {
            return base.Channel.CreateActivityAsync(Item);
        }
        
        public bool DeleteActivity(int ItemID) {
            return base.Channel.DeleteActivity(ItemID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteActivityAsync(int ItemID) {
            return base.Channel.DeleteActivityAsync(ItemID);
        }
        
        public bool BulkDeleteActivities(System.DateTime StartDate, System.DateTime EndDate, int EmployeeID) {
            return base.Channel.BulkDeleteActivities(StartDate, EndDate, EmployeeID);
        }
        
        public System.Threading.Tasks.Task<bool> BulkDeleteActivitiesAsync(System.DateTime StartDate, System.DateTime EndDate, int EmployeeID) {
            return base.Channel.BulkDeleteActivitiesAsync(StartDate, EndDate, EmployeeID);
        }
        
        public bool UpdateActivity(ePlanifModelsLib.Activity Item) {
            return base.Channel.UpdateActivity(Item);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateActivityAsync(ePlanifModelsLib.Activity Item) {
            return base.Channel.UpdateActivityAsync(Item);
        }
        
        public ePlanifModelsLib.GroupMember[] GetGroupMembers(int GroupID) {
            return base.Channel.GetGroupMembers(GroupID);
        }
        
        public System.Threading.Tasks.Task<ePlanifModelsLib.GroupMember[]> GetGroupMembersAsync(int GroupID) {
            return base.Channel.GetGroupMembersAsync(GroupID);
        }
        
        public int CreateGroupMember(ePlanifModelsLib.GroupMember Item) {
            return base.Channel.CreateGroupMember(Item);
        }
        
        public System.Threading.Tasks.Task<int> CreateGroupMemberAsync(ePlanifModelsLib.GroupMember Item) {
            return base.Channel.CreateGroupMemberAsync(Item);
        }
        
        public bool DeleteGroupMember(int ItemID) {
            return base.Channel.DeleteGroupMember(ItemID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteGroupMemberAsync(int ItemID) {
            return base.Channel.DeleteGroupMemberAsync(ItemID);
        }
        
        public ePlanifModelsLib.Grant[] GetGrants(int ProfileID) {
            return base.Channel.GetGrants(ProfileID);
        }
        
        public System.Threading.Tasks.Task<ePlanifModelsLib.Grant[]> GetGrantsAsync(int ProfileID) {
            return base.Channel.GetGrantsAsync(ProfileID);
        }
        
        public int CreateGrant(ePlanifModelsLib.Grant Item) {
            return base.Channel.CreateGrant(Item);
        }
        
        public System.Threading.Tasks.Task<int> CreateGrantAsync(ePlanifModelsLib.Grant Item) {
            return base.Channel.CreateGrantAsync(Item);
        }
        
        public bool DeleteGrant(int ItemID) {
            return base.Channel.DeleteGrant(ItemID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteGrantAsync(int ItemID) {
            return base.Channel.DeleteGrantAsync(ItemID);
        }
        
        public bool UpdateGrant(ePlanifModelsLib.Grant Item) {
            return base.Channel.UpdateGrant(Item);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateGrantAsync(ePlanifModelsLib.Grant Item) {
            return base.Channel.UpdateGrantAsync(Item);
        }
        
        public ePlanifModelsLib.Group[] GetGroups() {
            return base.Channel.GetGroups();
        }
        
        public System.Threading.Tasks.Task<ePlanifModelsLib.Group[]> GetGroupsAsync() {
            return base.Channel.GetGroupsAsync();
        }
        
        public int CreateGroup(ePlanifModelsLib.Group Item) {
            return base.Channel.CreateGroup(Item);
        }
        
        public System.Threading.Tasks.Task<int> CreateGroupAsync(ePlanifModelsLib.Group Item) {
            return base.Channel.CreateGroupAsync(Item);
        }
        
        public bool DeleteGroup(int ItemID) {
            return base.Channel.DeleteGroup(ItemID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteGroupAsync(int ItemID) {
            return base.Channel.DeleteGroupAsync(ItemID);
        }
        
        public bool UpdateGroup(ePlanifModelsLib.Group Item) {
            return base.Channel.UpdateGroup(Item);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateGroupAsync(ePlanifModelsLib.Group Item) {
            return base.Channel.UpdateGroupAsync(Item);
        }
        
        public ePlanifModelsLib.Account[] GetAccounts() {
            return base.Channel.GetAccounts();
        }
        
        public System.Threading.Tasks.Task<ePlanifModelsLib.Account[]> GetAccountsAsync() {
            return base.Channel.GetAccountsAsync();
        }
        
        public int CreateAccount(ePlanifModelsLib.Account Item) {
            return base.Channel.CreateAccount(Item);
        }
        
        public System.Threading.Tasks.Task<int> CreateAccountAsync(ePlanifModelsLib.Account Item) {
            return base.Channel.CreateAccountAsync(Item);
        }
        
        public bool UpdateAccount(ePlanifModelsLib.Account Item) {
            return base.Channel.UpdateAccount(Item);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAccountAsync(ePlanifModelsLib.Account Item) {
            return base.Channel.UpdateAccountAsync(Item);
        }
        
        public ePlanifModelsLib.Account GetCurrentAccount() {
            return base.Channel.GetCurrentAccount();
        }
        
        public System.Threading.Tasks.Task<ePlanifModelsLib.Account> GetCurrentAccountAsync() {
            return base.Channel.GetCurrentAccountAsync();
        }
        
        public ePlanifModelsLib.Profile GetCurrentProfile() {
            return base.Channel.GetCurrentProfile();
        }
        
        public System.Threading.Tasks.Task<ePlanifModelsLib.Profile> GetCurrentProfileAsync() {
            return base.Channel.GetCurrentProfileAsync();
        }
        
        public ePlanifModelsLib.Option GetOption() {
            return base.Channel.GetOption();
        }
        
        public System.Threading.Tasks.Task<ePlanifModelsLib.Option> GetOptionAsync() {
            return base.Channel.GetOptionAsync();
        }
        
        public bool UpdateOption(ePlanifModelsLib.Option Option) {
            return base.Channel.UpdateOption(Option);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateOptionAsync(ePlanifModelsLib.Option Option) {
            return base.Channel.UpdateOptionAsync(Option);
        }
        
        public ePlanifModelsLib.Layer[] GetLayers() {
            return base.Channel.GetLayers();
        }
        
        public System.Threading.Tasks.Task<ePlanifModelsLib.Layer[]> GetLayersAsync() {
            return base.Channel.GetLayersAsync();
        }
        
        public int CreateLayer(ePlanifModelsLib.Layer Item) {
            return base.Channel.CreateLayer(Item);
        }
        
        public System.Threading.Tasks.Task<int> CreateLayerAsync(ePlanifModelsLib.Layer Item) {
            return base.Channel.CreateLayerAsync(Item);
        }
        
        public bool UpdateLayer(ePlanifModelsLib.Layer Item) {
            return base.Channel.UpdateLayer(Item);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateLayerAsync(ePlanifModelsLib.Layer Item) {
            return base.Channel.UpdateLayerAsync(Item);
        }
        
        public ePlanifModelsLib.EmployeeView[] GetEmployeeViews() {
            return base.Channel.GetEmployeeViews();
        }
        
        public System.Threading.Tasks.Task<ePlanifModelsLib.EmployeeView[]> GetEmployeeViewsAsync() {
            return base.Channel.GetEmployeeViewsAsync();
        }
        
        public int CreateEmployeeView(ePlanifModelsLib.EmployeeView Item) {
            return base.Channel.CreateEmployeeView(Item);
        }
        
        public System.Threading.Tasks.Task<int> CreateEmployeeViewAsync(ePlanifModelsLib.EmployeeView Item) {
            return base.Channel.CreateEmployeeViewAsync(Item);
        }
        
        public bool DeleteEmployeeView(int ItemID) {
            return base.Channel.DeleteEmployeeView(ItemID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEmployeeViewAsync(int ItemID) {
            return base.Channel.DeleteEmployeeViewAsync(ItemID);
        }
        
        public bool UpdateEmployeeView(ePlanifModelsLib.EmployeeView Item) {
            return base.Channel.UpdateEmployeeView(Item);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateEmployeeViewAsync(ePlanifModelsLib.EmployeeView Item) {
            return base.Channel.UpdateEmployeeViewAsync(Item);
        }
        
        public ePlanifModelsLib.ActivityTypeView[] GetActivityTypeViews() {
            return base.Channel.GetActivityTypeViews();
        }
        
        public System.Threading.Tasks.Task<ePlanifModelsLib.ActivityTypeView[]> GetActivityTypeViewsAsync() {
            return base.Channel.GetActivityTypeViewsAsync();
        }
        
        public int CreateActivityTypeView(ePlanifModelsLib.ActivityTypeView Item) {
            return base.Channel.CreateActivityTypeView(Item);
        }
        
        public System.Threading.Tasks.Task<int> CreateActivityTypeViewAsync(ePlanifModelsLib.ActivityTypeView Item) {
            return base.Channel.CreateActivityTypeViewAsync(Item);
        }
        
        public bool DeleteActivityTypeView(int ItemID) {
            return base.Channel.DeleteActivityTypeView(ItemID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteActivityTypeViewAsync(int ItemID) {
            return base.Channel.DeleteActivityTypeViewAsync(ItemID);
        }
        
        public bool UpdateActivityTypeView(ePlanifModelsLib.ActivityTypeView Item) {
            return base.Channel.UpdateActivityTypeView(Item);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateActivityTypeViewAsync(ePlanifModelsLib.ActivityTypeView Item) {
            return base.Channel.UpdateActivityTypeViewAsync(Item);
        }
        
        public ePlanifModelsLib.EmployeeViewMember[] GetEmployeeViewMembers(int ViewID) {
            return base.Channel.GetEmployeeViewMembers(ViewID);
        }
        
        public System.Threading.Tasks.Task<ePlanifModelsLib.EmployeeViewMember[]> GetEmployeeViewMembersAsync(int ViewID) {
            return base.Channel.GetEmployeeViewMembersAsync(ViewID);
        }
        
        public int CreateEmployeeViewMember(ePlanifModelsLib.EmployeeViewMember Item) {
            return base.Channel.CreateEmployeeViewMember(Item);
        }
        
        public System.Threading.Tasks.Task<int> CreateEmployeeViewMemberAsync(ePlanifModelsLib.EmployeeViewMember Item) {
            return base.Channel.CreateEmployeeViewMemberAsync(Item);
        }
        
        public bool DeleteEmployeeViewMember(int ItemID) {
            return base.Channel.DeleteEmployeeViewMember(ItemID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEmployeeViewMemberAsync(int ItemID) {
            return base.Channel.DeleteEmployeeViewMemberAsync(ItemID);
        }
        
        public ePlanifModelsLib.ActivityTypeViewMember[] GetActivityTypeViewMembers(int ViewID) {
            return base.Channel.GetActivityTypeViewMembers(ViewID);
        }
        
        public System.Threading.Tasks.Task<ePlanifModelsLib.ActivityTypeViewMember[]> GetActivityTypeViewMembersAsync(int ViewID) {
            return base.Channel.GetActivityTypeViewMembersAsync(ViewID);
        }
        
        public int CreateActivityTypeViewMember(ePlanifModelsLib.ActivityTypeViewMember Item) {
            return base.Channel.CreateActivityTypeViewMember(Item);
        }
        
        public System.Threading.Tasks.Task<int> CreateActivityTypeViewMemberAsync(ePlanifModelsLib.ActivityTypeViewMember Item) {
            return base.Channel.CreateActivityTypeViewMemberAsync(Item);
        }
        
        public bool DeleteActivityTypeViewMember(int ItemID) {
            return base.Channel.DeleteActivityTypeViewMember(ItemID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteActivityTypeViewMemberAsync(int ItemID) {
            return base.Channel.DeleteActivityTypeViewMemberAsync(ItemID);
        }
        
        public bool HasWriteAccessToEmployee(int EmployeeID) {
            return base.Channel.HasWriteAccessToEmployee(EmployeeID);
        }
        
        public System.Threading.Tasks.Task<bool> HasWriteAccessToEmployeeAsync(int EmployeeID) {
            return base.Channel.HasWriteAccessToEmployeeAsync(EmployeeID);
        }
        
        public bool HasWriteAccessToActivity(int ActivityID) {
            return base.Channel.HasWriteAccessToActivity(ActivityID);
        }
        
        public System.Threading.Tasks.Task<bool> HasWriteAccessToActivityAsync(int ActivityID) {
            return base.Channel.HasWriteAccessToActivityAsync(ActivityID);
        }
    }
}
